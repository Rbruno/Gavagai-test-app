{"version":3,"sources":["Components/SearchComponent/searchComponent.js","Components/SimilarWordsComponent/similarWordsComponent.js","Components/ModalComponent/modalComponent.js","App.js","index.js"],"names":["SearchComponent","props","languages","useState","word","setword","language","setlanguage","Fragment","Form","onSubmit","e","preventDefault","Group","controlId","InputGroup","FormControl","placeholder","aria-label","onChange","target","value","Control","as","map","Button","variant","size","block","onClick","GetWords","SimilarWordComponent","similarWords","ListGroup","className","length","Alert","words","Item","action","GetWordInfo","haveWords","ModalComponent","linkInfo","link","Modal","aria-labelledby","centered","Header","closeButton","Title","id","Body","frequency","href","Footer","onHide","App","setlanguages","setsimilarWords","modalWord","setModalWord","modalLink","setModalLink","modalFrequency","setModalFrequency","modalShow","setModalShow","isActive","setisActive","basicUrl","apiKey","a","fetch","then","response","json","data","urlComplete","stringSimilarWords","console","log","undefined","additionalInformation","useEffect","GetLanguages","active","spinner","text","Container","fluid","Jumbotron","Row","Col","md","show","ReactDOM","render","document","getElementById"],"mappings":"uUAGe,SAASA,EAAgBC,GACpC,IAAMC,EAAYD,EAAMC,UADmB,EAEnBC,mBAAS,IAFU,mBAEpCC,EAFoC,KAE9BC,EAF8B,OAGXF,mBAAS,IAHE,mBAGpCG,EAHoC,KAG1BC,EAH0B,KAK3C,OACI,cAAC,IAAMC,SAAP,UACI,eAACC,EAAA,EAAD,CAAMC,SAAU,SAAAC,GAAOA,EAAEC,kBAAzB,UACI,cAACH,EAAA,EAAKI,MAAN,CAAYC,UAAU,gBAAtB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,YAAY,OACZC,aAAW,OACXC,SAAU,SAACR,GAAD,OAAKN,EAAQM,EAAES,OAAOC,QAChCA,MAAOjB,IAEX,eAACK,EAAA,EAAKa,QAAN,CAAcC,GAAG,SAASJ,SAAU,SAACR,GAAD,OAAKJ,EAAYI,EAAES,OAAOC,QAA9D,UACA,sDAAa,GAETnB,EAAUsB,KAAI,SAAClB,GAEX,OAAO,iCAAwBA,GAAXA,cAQpC,cAACmB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,OAAK,EAACC,QAAS,kBAAM5B,EAAM6B,SAAS1B,EAAME,IAA9E,yB,oBC7BD,SAASyB,EAAqB9B,GAEzC,IAAM+B,EAAe/B,EAAM+B,aAwB3B,OACI,cAAC,IAAMxB,SAAP,UACI,cAACyB,EAAA,EAAD,CAAYC,UAAU,QAAtB,SAvBR,WACI,GAA4B,IAAxBF,EAAaG,OACb,OAAO,cAACC,EAAA,EAAD,CAAOV,QAAS,OAAhB,qCAEP,IAAIW,EAAQL,EAAaR,KAAI,SAACpB,GAE1B,OACI,cAAC6B,EAAA,EAAUK,KAAX,CAAgBC,QAAM,EAAiBV,QAAS,kBAAM5B,EAAMuC,YAAYpC,EAAKA,OAA7E,SACCA,EAAKA,MADsBA,EAAKA,SAKzC,OAAO,gCACC,eAACgC,EAAA,EAAD,CAAOV,QAAS,WAAhB,UAA8BW,EAAMF,OAApC,2BACCE,KAWDI,O,oBC9BL,SAASC,EAAezC,GACnC,IAAI0C,EAAW,GAOf,MANmB,KAAf1C,EAAM2C,OACND,EAAY,gCAMd,eAACE,EAAA,EAAD,2BACM5C,GADN,IAEE0B,KAAK,KACLmB,kBAAgB,gCAChBC,UAAQ,EAJV,UAME,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,gCAAhB,oBAIF,eAACN,EAAA,EAAMO,KAAP,WACE,6BAAKnD,EAAMG,OACX,+DAC+BH,EAAMoD,aAErC,8BACCV,EACD,mBAAGW,KAAMrD,EAAM2C,KAAf,SACC3C,EAAM2C,aAMT,cAACC,EAAA,EAAMU,OAAP,UACE,cAAC9B,EAAA,EAAD,CAAQI,QAAS5B,EAAMuD,OAAvB,yB,qBC4FKC,MApHf,WAAgB,IAAD,EAEqBtD,mBAAS,IAF9B,mBAEND,EAFM,KAEKwD,EAFL,OAGmBvD,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAK2BJ,mBAAS,IALpC,mBAKN6B,EALM,KAKQ2B,EALR,OAQqBxD,mBAAS,IAR9B,mBAQNyD,EARM,KAQKC,EARL,OASqB1D,mBAAS,IAT9B,mBASN2D,EATM,KASKC,EATL,OAU+B5D,mBAAS,IAVxC,mBAUN6D,EAVM,KAUUC,EAVV,OAcqB9D,oBAAS,GAd9B,mBAcN+D,EAdM,KAcKC,EAdL,OAemBhE,oBAAS,GAf5B,mBAeNiE,EAfM,KAeIC,EAfJ,KAiBTC,EAAW,qCACXC,EAAS,2CAlBA,4CAyBb,sBAAAC,EAAA,4DAEoB,sCAAuCD,EAF3D,SAIQE,MAFY,+EAGfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAInB,EAAamB,MAN/B,4CAzBa,kEAoCb,WAAwBzE,EAAME,GAA9B,eAAAkE,EAAA,6DAEEH,GAAY,GAERS,EAAcR,EAAWhE,EAAU,IAAKF,EAAOmE,EAJrD,SAMQE,MAAMK,GACTJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJtE,EAAYD,GACZqD,EAAgBkB,EAAKE,oBACrBV,GAAY,MAXlB,4CApCa,kEAqDb,WAA2BjE,GAA3B,eAAAoE,EAAA,6DAEEH,GAAY,GAERS,EAAcR,EAAWhE,EAAU,IAAKF,EAAO,QAAUmE,EAJ/D,SAMQE,MAAMK,GACTJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJV,GAAa,GACba,QAAQC,IAAIJ,GACZhB,EAAagB,EAAKzE,MAClB6D,EAAkBY,EAAKxB,gBACY6B,IAA/BL,EAAKM,sBACPpB,EAAac,EAAKM,sBAAsBvC,MAExCmB,EAAa,IAGfM,GAAY,MAnBlB,4CArDa,sBA6Eb,OAzDAe,qBAAU,YApBG,mCAqBXC,MAyDA,cAAC,IAAD,CACEC,OAAQlB,EACRmB,SAAO,EACPC,KAAK,aAHP,SAKE,eAACC,EAAA,EAAD,CAAWvD,UAAU,MAAOwD,MAAM,KAAlC,UACE,eAACC,EAAA,EAAD,WAEE,cAACC,EAAA,EAAD,CAAK1D,UAAU,4BAAf,SACE,cAAC2D,EAAA,EAAD,CAAKC,GAAG,OAAR,SACA,oBAAI5D,UAAU,SAAd,8BAIF,cAAC0D,EAAA,EAAD,CAAK1D,UAAU,4BAAf,SACI,cAAClC,EAAD,CAAiBE,UAAWA,EAAW4B,SA7FtC,kDAiGL,cAAC8D,EAAA,EAAD,CAAK1D,UAAU,iCAAf,SACE,cAACH,EAAD,CAAsBC,aAAcA,EAAcQ,YAlG/C,mDAsGP,cAACE,EAAD,CACEqD,KAAM7B,EACNV,OAAQ,kBAAMW,GAAa,IAC3B/D,KAAMwD,EACNP,UAAWW,EACXpB,KAAMkB,UCpHhBkC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ca5e0dda.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {Form, Button, InputGroup, FormControl} from 'react-bootstrap'\r\n\r\nexport default function SearchComponent(props) {\r\n    const languages = props.languages;\r\n    const [word, setword] = useState([]);\r\n    const [language, setlanguage] = useState([]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form onSubmit={e => { e.preventDefault(); }}>\r\n                <Form.Group controlId=\"searchControl\">\r\n                    <InputGroup>\r\n                        <FormControl\r\n                            placeholder=\"Word\"\r\n                            aria-label=\"Word\"\r\n                            onChange={(e)=>setword(e.target.value)}\r\n                            value={word}\r\n                        />\r\n                        <Form.Control as=\"select\" onChange={(e)=>setlanguage(e.target.value)}>\r\n                        <option key={0}>Select a language</option>\r\n                        {\r\n                            languages.map((language) =>{\r\n                                \r\n                                return <option key={language}>{language}</option>\r\n                                 \r\n                            })\r\n                        }\r\n                        </Form.Control>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                \r\n                <Button variant=\"primary\" size=\"lg\" block onClick={() => props.GetWords(word, language)}>\r\n                    Search\r\n                </Button>\r\n\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport {ListGroup, Alert} from 'react-bootstrap'\r\n\r\nexport default function SimilarWordComponent(props) {\r\n    \r\n    const similarWords = props.similarWords;\r\n\r\n    //function that verifies that the array of similar words is not empty\r\n    function haveWords(){\r\n        if (similarWords.length === 0) {\r\n            return <Alert variant={'info'} >Not found similar words</Alert>\r\n        } else {\r\n            let words = similarWords.map((word)=>{\r\n                \r\n                return (\r\n                    <ListGroup.Item action key={word.word} onClick={() => props.GetWordInfo(word.word)} >\r\n                    {word.word}\r\n                    </ListGroup.Item>\r\n                )\r\n            })\r\n            return <div>\r\n                    <Alert variant={'success '} >{words.length} Similar words found!</Alert>\r\n                    {words}\r\n                </div>\r\n            \r\n           \r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ListGroup  className=\"w-100\">\r\n                {\r\n                    haveWords()\r\n                }\r\n            </ListGroup>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Modal, Button} from 'react-bootstrap'\r\n\r\nexport default function ModalComponent(props) {\r\n    let linkInfo = ''\r\n    if (props.link !== ''){\r\n        linkInfo =  \"For more information visit: \" \r\n             \r\n    }\r\n\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Info\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>{props.word}</h4>\r\n          <p>\r\n          This word has a frequency of: {props.frequency}\r\n          </p>\r\n          <p>\r\n          {linkInfo}\r\n          <a href={props.link }>\r\n          {props.link }\r\n          </a>\r\n          </p>\r\n\r\n          \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect} from 'react'\n//styles\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap'\n\n//components\nimport SearchComponent from './Components/SearchComponent/searchComponent';\nimport SimilarWordComponent from './Components/SimilarWordsComponent/similarWordsComponent';\nimport ModalComponent from './Components/ModalComponent/modalComponent';\n\n//plugins\nimport LoadingOverlay from 'react-loading-overlay';\n\nfunction App() { \n\n  const [languages, setlanguages] = useState([]);\n  const [language, setlanguage] = useState([]);\n\n  const [similarWords, setsimilarWords] = useState([]);\n\n  //Modal info\n  const [modalWord, setModalWord] = useState([]);\n  const [modalLink, setModalLink] = useState([]);\n  const [modalFrequency, setModalFrequency] = useState([]);\n\n\n  //Controls\n  const [modalShow, setModalShow] = useState(false);\n  const [isActive, setisActive] = useState(false);\n\n  let basicUrl = 'https://api.gavagai.se/v3/lexicon/';\n  let apiKey = '?apiKey=12c1199d4b43706e6a6e8394b518b7f8';\n\n  useEffect(() => {\n    GetLanguages();\n  });\n  \n  //function that looks for the allowed languages\n  async function GetLanguages(){\n    \n    let urlComplete = 'https://api.gavagai.se/v3/languages'+ apiKey;\n\n    await fetch(urlComplete)\n      .then(response => response.json())\n      .then(data => setlanguages(data)) \n\n  }\n\n  //function that returns similar words\n  async function GetWords(word, language){\n\n    setisActive(true)\n\n    let urlComplete = basicUrl + language +'/'+ word + apiKey;\n\n    await fetch(urlComplete)\n      .then(response => response.json())\n      .then(data => {\n        setlanguage(language)\n        setsimilarWords(data.stringSimilarWords)\n        setisActive(false)\n      })  \n\n  }\n\n  //function that returns the information of the searched word\n  async function GetWordInfo(word){\n\n    setisActive(true)\n\n    let urlComplete = basicUrl + language +'/'+ word + '/info' + apiKey;\n\n    await fetch(urlComplete)\n      .then(response => response.json())\n      .then(data => {\n        setModalShow(true)\n        console.log(data)\n        setModalWord(data.word)\n        setModalFrequency(data.frequency)\n        if (data.additionalInformation !== undefined ){\n          setModalLink(data.additionalInformation.link)\n        }else{\n          setModalLink('')\n        }\n          \n        setisActive(false)\n      })  \n\n  }\n\n  return (\n    <LoadingOverlay\n      active={isActive}\n      spinner\n      text='Loading...'\n      >\n      <Container className=\"p-3\"  fluid=\"md\">\n        <Jumbotron>\n\n          <Row className=\"justify-content-md-center\">\n            <Col md=\"auto\">\n            <h1 className=\"Header\">Gavagai Test</h1>\n            </Col>\n          </Row>\n          {/* Search Component */}\n          <Row className=\"justify-content-md-center\">          \n              <SearchComponent languages={languages} GetWords={GetWords} />\n          </Row>\n\n          {/* Similar Words Component */}\n          <Row className=\"p-3 justify-content-md-center \"> \n            <SimilarWordComponent similarWords={similarWords} GetWordInfo={GetWordInfo}></SimilarWordComponent>\n          </Row>  \n        </Jumbotron> \n\n        <ModalComponent\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          word={modalWord}\n          frequency={modalFrequency}\n          link={modalLink}\n        /> \n      </Container>\n    </LoadingOverlay>\n    \n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}